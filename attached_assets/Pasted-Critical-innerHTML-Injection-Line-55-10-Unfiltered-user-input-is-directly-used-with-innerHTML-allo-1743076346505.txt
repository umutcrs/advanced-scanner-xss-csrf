Critical
innerHTML Injection
Line 55:10

Unfiltered user input is directly used with innerHTML, allowing attackers to inject and execute malicious scripts. See OWASP guidelines for handling HTML content safely.

Vulnerable Code

Copy
...if (container && container instanceof HTMLElement) {
  container.innerHTML = sanitized;
}
...
Security Recommendation

Copy Secure Code
Always sanitize user input before inserting it into the DOM. Use textContent instead of innerHTML or implement a library like DOMPurify.

// Option 1: Use textContent (safest)
document.getElementById('output').textContent = userInput;

// Option 2: Use DOMPurify library
document.getElementById('output').innerHTML = DOMPurify.sanitize(userInput);
High
Insecure Cross-Origin Message Handling
Line 164:1

This code accepts postMessage events without verifying the origin, which could allow attackers to inject data from malicious websites.

Vulnerable Code

Copy
...];
window.addEventListener ('message', function (event) {
  // Origin validation
  ...
Security Recommendation

Copy Secure Code
Always validate the origin of incoming messages before processing them.

// UNSAFE:
// window.addEventListener('message', function(event) {
//   const data = event.data;
//   // Process data without origin check...
// });

// SAFE:
window.addEventListener('message', function(event) {
  // Always verify the origin of incoming messages
  const trustedOrigins = ['https://trusted-site.com', 'https://api.your-app.com'];
  
  if (!trustedOrigins.includes(event.origin)) {
    console.error('Message received from untrusted origin:', event.origin);
    return;
  }
  
  // It's safe to process the message now
  try {
    const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;
    
    // Process data...
    
  } catch (error) {
    console.error('Error processing message:', error);
  }
});

// When sending messages, always specify target origin:
targetWindow.postMessage(data, 'https://specific-target.com');  // Never use '*'
High
Dynamic Script Source Assignment
Line 196:1

Setting the src property of script elements with user input allows loading and executing untrusted code.

Vulnerable Code

Copy
...const script = document.createElement ('script');
script.src = url;
// Set integrity for subresource integrity protection
...
Security Recommendation

Copy Secure Code
Always validate script sources against a whitelist of trusted domains.

function loadExternalScript(src) {
  // Whitelist of trusted domains
  const trustedDomains = [
    'cdn.trusted-site.com',
    'api.your-company.com',
    'cdn.jsdelivr.net'
  ];
  
  // Parse the URL to get the hostname
  let url;
  try {
    url = new URL(src, window.location.origin);
  } catch (e) {
    console.error("Invalid URL format");
    return;
  }
  
  // Check if the hostname is trusted
  if (!trustedDomains.includes(url.hostname)) {
    console.error("Untrusted script source domain");
    return;
  }
  
  // Now it's safer to load the script
  const script = document.createElement('script');
  script.src = src;
  document.head.appendChild(script);
}
High
Dynamic Script Source Assignment
Line 196:1

Setting the src property of script elements with user input allows loading and executing untrusted code.

Vulnerable Code

Copy
...const script = document.createElement ('script');
script.src = url;
// Set integrity for subresource integrity protection
...
Security Recommendation

Copy Secure Code
Always validate script sources against a whitelist of trusted domains.

function loadExternalScript(src) {
  // Whitelist of trusted domains
  const trustedDomains = [
    'cdn.trusted-site.com',
    'api.your-company.com',
    'cdn.jsdelivr.net'
  ];
  
  // Parse the URL to get the hostname
  let url;
  try {
    url = new URL(src, window.location.origin);
  } catch (e) {
    console.error("Invalid URL format");
    return;
  }
  
  // Check if the hostname is trusted
  if (!trustedDomains.includes(url.hostname)) {
    console.error("Untrusted script source domain");
    return;
  }
  
  // Now it's safer to load the script
  const script = document.createElement('script');
  script.src = src;
  document.head.appendChild(script);
}
Medium
Potential Prototype Pollution via defineProperty
Line 74:1

Using Object.defineProperty with user-controlled property names can lead to prototype pollution or object property clobbering.

Vulnerable Code

Copy
...// Create safe descriptor
Object.defineProperty (obj, key, {
  value: allowedProperties[key],
  ...
Security Recommendation

Copy Secure Code
Validate object and property names before using defineProperty, especially with user input.

// Instead of:
// Object.defineProperty(target, userInput, { value: 'some value' });

// Validate the property name first:
function safeDefineProperty(obj, propName, descriptor) {
  // Disallow prototype chain or constructor manipulation
  if (propName === '__proto__' || 
      propName === 'constructor' || 
      propName === 'prototype') {
    console.error('Attempted to define unsafe property:', propName);
    return false;
  }
  
  // Only allow whitelisted properties if using user input
  const allowedProps = ['name', 'description', 'value', 'isActive'];
  if (!allowedProps.includes(propName)) {
    console.error('Property name not in allowed list:', propName);
    return false;
  }
  
  Object.defineProperty(obj, propName, descriptor);
  return true;
}
Medium
postMessage Without Origin Check
Line 164:8

Handling postMessage events without verifying the origin can lead to XSS attacks from malicious websites.

Vulnerable Code

Copy
...];
window.addEventListener ('message', function (event) {
  // Origin validation
  ...
Security Recommendation

Copy Secure Code
Always validate the origin of received messages.

// Instead of:
window.addEventListener('message', function(event) {
  // Process event.data without checking origin
  processMessage(event.data);
});

// Add origin validation:
window.addEventListener('message', function(event) {
  // Check that the origin is from a trusted domain
  const trustedOrigins = ['https://trusted-site.com', 'https://partner-site.org'];
  
  if (trustedOrigins.includes(event.origin)) {
    // Safe to process the message
    processMessage(event.data);
  } else {
    console.warn('Received message from untrusted origin:', event.origin);
  }
});
Medium
Dynamic Script Creation
Line 195:16

Dynamically creating script elements and setting their content or src attribute can execute malicious code.

Vulnerable Code

Copy
...}
const script = document.createElement ('script');
script.src = url;
...
Security Recommendation

Copy Secure Code
Never load scripts from untrusted sources. Use a whitelist approach to validate script URLs before loading.

function loadScript(src) {
  // Whitelist of allowed script sources
  const allowedSources = [
    'https://trusted-cdn.com/',
    'https://your-own-domain.com/scripts/'
  ];
  
  // Check if URL is from allowed source
  const isAllowed = allowedSources.some(source => 
    src.startsWith(source));
    
  if (!isAllowed) {
    console.error("Blocked loading script from untrusted source");
    return;
  }
  
  const script = document.createElement('script');
  script.src = src;
  document.head.appendChild(script);
}
GitHub
Â© 2025 JavaScript XSS Scanner. All rights reserved.