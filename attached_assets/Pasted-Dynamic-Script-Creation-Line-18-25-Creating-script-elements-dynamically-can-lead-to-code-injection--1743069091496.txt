Dynamic Script Creation
Line 18:25

Creating script elements dynamically can lead to code injection vulnerabilities, especially when the source or content is influenced by user input.

Vulnerable Code

Copy
...// Inject a script tag into the page to access methods of the window object
const script = document.createElement ('script')

...
Security Recommendation

Copy Secure Code
Avoid dynamically creating script elements. If necessary, ensure strict validation of sources and use CSP (Content Security Policy).

// UNSAFE:
// const script = document.createElement('script');
// script.src = userControlledUrl; // Danger: remote code execution
// document.head.appendChild(script);

// SAFER approaches:
// 1. Avoid dynamic script creation entirely, use alternative techniques
//    like fetch() to retrieve data instead

// 2. If you must create scripts dynamically, implement strict validation
function loadScript(url) {
  // Validate allowed domains
  const trustedDomains = ['trusted-cdn.com', 'your-domain.com'];
  const urlObj = new URL(url);
  
  if (!trustedDomains.includes(urlObj.hostname)) {
    console.error('Script domain not allowed:', urlObj.hostname);
    return Promise.reject(new Error('Untrusted script domain'));
  }
  
  // Use fetch instead of script injection when possible
  return fetch(url)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text();
    })
    .then(code => {
      // Validate the code before executing it
      // This is difficult to do safely - consider alternatives
      
      // Execute in a controlled manner
      const functionFromCode = new Function(code);
      return functionFromCode();
    });
}
High
Event Handler Injection Vector
Line 20:7

Assigning event handlers directly using user input is a common XSS vector that can execute arbitrary code.

Vulnerable Code

Copy
...
script.onload = () => {
  const onMessage = ({
    ...
Security Recommendation

Copy Secure Code
Use addEventListener and pass functions instead of strings. Never assign event handlers using user-controlled data.

// AVOID these patterns:
// element.onclick = userProvidedCode;                // UNSAFE
// element['onclick'] = userProvidedCode;             // UNSAFE
// element.setAttribute('onclick', userProvidedCode); // UNSAFE

// INSTEAD, use proper event listeners:
element.addEventListener('click', function(event) {
  // Access user data here as a parameter
  handleClick(userProvidedData);
});

// If you need dynamic handlers:
const handlers = {
  'edit': function() { /* edit functionality */ },
  'delete': function() { /* delete functionality */ },
  'view': function() { /* view functionality */ }
};

// Then safely use the predefined handler:
const action = validateAction(userProvidedAction); // Validate to allowed values
if (handlers.hasOwnProperty(action)) {
  element.addEventListener('click', handlers[action]);
}
High
Prototype Pollution Risk
Line 176:1

Modifying Object.prototype directly can lead to prototype pollution attacks, enabling XSS or security bypasses.

Vulnerable Code

Copy
...if (
Object.prototype.hasOwnProperty.call (node, property) &&
technologies.findIndex (
...
Security Recommendation

Copy Secure Code
Never modify object prototypes with user input or in ways that could be influenced by user input.

// DANGEROUS:
// Object.prototype.toString = () => userControlledValue;
// Object.assign(Object.prototype, userInputObject);

// SAFE alternatives:
// 1. Create a new object with desired properties
const safeObj = { 
  ...baseObject, 
  userValue: sanitizedUserValue 
};

// 2. For mixins and utilities, use composition over inheritance
function createEnhancedObject(baseObj, enhancements) {
  // Create new object without modifying any prototypes
  return Object.assign({}, baseObj, validateEnhancements(enhancements));
}
High
Template Literal Injection
Line 392:33

Using unescaped user data in template literals that are later injected into HTML can lead to XSS vulnerabilities.

Vulnerable Code

Copy
...Content.driver ('detectTechnology', [
url.startsWith ('http') ? url : `http:// ${
url}
`,
'Microsoft Advertising',
...
Security Recommendation

Copy Secure Code
Always sanitize user data before using it in template literals that will be inserted into HTML.

// UNSAFE:
// const template = `<div>${userInput}</div>`;
// element.innerHTML = template;

// SAFE:
import DOMPurify from 'dompurify';

// Option 1: Sanitize before template insertion
const sanitizedInput = DOMPurify.sanitize(userInput);
const template = `<div>${sanitizedInput}</div>`;
element.innerHTML = template;

// Option 2: Sanitize the entire template
const unsafeTemplate = `<div>${userInput}</div>`;
element.innerHTML = DOMPurify.sanitize(unsafeTemplate);
Medium
Dynamic Script Creation
Line 18:16

Dynamically creating script elements and setting their content or src attribute can execute malicious code.

Vulnerable Code

Copy
...// Inject a script tag into the page to access methods of the window object
const script = document.createElement ('script')

...
Security Recommendation

Copy Secure Code
Never load scripts from untrusted sources. Use a whitelist approach to validate script URLs before loading.

function loadScript(src) {
  // Whitelist of allowed script sources
  const allowedSources = [
    'https://trusted-cdn.com/',
    'https://your-own-domain.com/scripts/'
  ];
  
  // Check if URL is from allowed source
  const isAllowed = allowedSources.some(source => 
    src.startsWith(source));
    
  if (!isAllowed) {
    console.error("Blocked loading script from untrusted source");
    return;
  }
  
  const script = document.createElement('script');
  script.src = src;
  document.head.appendChild(script);
}
Low
Unsafe URL Construction
Line 392:33

Constructing URLs by concatenating strings or using template literals can introduce URL injection vulnerabilities if not properly validated.

Vulnerable Code

Copy
...Content.driver ('detectTechnology', [
url.startsWith ('http') ? url : `http:// ${
url}
...
Security Recommendation

Copy Secure Code
Use URL constructor or URLSearchParams to safely build URLs with user input.

// Instead of direct concatenation:
// const url = 'https://example.com/?q=' + userInput;

// Use URL and URLSearchParams:
const baseUrl = 'https://example.com/';
const url = new URL(baseUrl);
url.searchParams.append('q', userInput);

// Result: safe URL with properly encoded parameters
fetch(url.toString())
  .then(response => response.json())
  .then(data => console.log(data));
Low
Unsafe URL Construction
Line 406:1

Constructing URLs by concatenating strings or using template literals can introduce URL injection vulnerabilities if not properly validated.

Vulnerable Code

Copy
......new Set ([
`https:// ${
  decodeURIComponent (
  ...
Security Recommendation

Copy Secure Code
Use URL constructor or URLSearchParams to safely build URLs with user input.

// Instead of direct concatenation:
// const url = 'https://example.com/?q=' + userInput;

// Use URL and URLSearchParams:
const baseUrl = 'https://example.com/';
const url = new URL(baseUrl);
url.searchParams.append('q', userInput);

// Result: safe URL with properly encoded parameters
fetch(url.toString())
  .then(response => response.json())
  .then(data => console.log(data));
Low
Unsafe URL Construction
Line 415:1

Constructing URLs by concatenating strings or using template literals can introduce URL injection vulnerabilities if not properly validated.

Vulnerable Code

Copy
...// eslint - disable - next - line unicorn / prefer - text - content
`https:// ${
ad.innerText.split ('\n').pop ()}
...
Security Recommendation

Copy Secure Code
Use URL constructor or URLSearchParams to safely build URLs with user input.

// Instead of direct concatenation:
// const url = 'https://example.com/?q=' + userInput;

// Use URL and URLSearchParams:
const baseUrl = 'https://example.com/';
const url = new URL(baseUrl);
url.searchParams.append('q', userInput);

// Result: safe URL with properly encoded parameters
fetch(url.toString())
  .then(response => response.json())
  .then(data => console.log(data));