Vulnerability Details

Tüm Açıklar Düzeltildi
Critical
Unsafe eval() Usage
Line 87:16

The use of eval() with user input creates a severe XSS vulnerability that allows arbitrary code execution. This is one of the most serious XSS vulnerabilities as it allows direct code execution.

Vulnerable Code
...// If you need dynamic code execution, rethink your approach.
console.warn ("eval () replaced with safer alternative by XSS scanner");
(() => {
  ...
Recommendation
Düzeltildi
Avoid using eval() with user input. For mathematical expressions, use safer alternatives like math.js library or Function constructor with proper input validation.

// Option 1: Use a math library
function calculateExpression() {
  const expr = document.getElementById('expression').value;
  try {
    // Validate that the input contains only mathematical expressions
    if (!/^[0-9\+\-\*\/\(\)\.\s]*$/.test(expr)) {
      throw new Error("Invalid expression");
    }
    const result = math.evaluate(expr); // Using math.js
    return result;
  } catch(e) {
    return "Error: Invalid expression";
  }
}
High
Dynamic Script Source Assignment
Line 60:7

Setting the src property of script elements with user input allows loading and executing untrusted code.

Vulnerable Code
...// Safe to use this domain
script.src = scriptSrc;
}
...
Recommendation
Always validate script sources against a whitelist of trusted domains.

function loadExternalScript(src) {
  // Whitelist of trusted domains
  const trustedDomains = [
    'cdn.trusted-site.com',
    'api.your-company.com',
    'cdn.jsdelivr.net'
  ];
  
  // Parse the URL to get the hostname
  let url;
  try {
    url = new URL(src, window.location.origin);
  } catch (e) {
    console.error("Invalid URL format");
    return;
  }
  
  // Check if the hostname is trusted
  if (!trustedDomains.includes(url.hostname)) {
    console.error("Untrusted script source domain");
    return;
  }
  
  // Now it's safer to load the script
  const script = document.createElement('script');
  script.src = src;
  document.head.appendChild(script);
}
High
Dynamic Script Source Assignment
Line 60:1

Setting the src property of script elements with user input allows loading and executing untrusted code.

Vulnerable Code
...// Safe to use this domain
script.src = scriptSrc;
}
...
Recommendation
Düzeltildi
Always validate script sources against a whitelist of trusted domains.

function loadExternalScript(src) {
  // Whitelist of trusted domains
  const trustedDomains = [
    'cdn.trusted-site.com',
    'api.your-company.com',
    'cdn.jsdelivr.net'
  ];
  
  // Parse the URL to get the hostname
  let url;
  try {
    url = new URL(src, window.location.origin);
  } catch (e) {
    console.error("Invalid URL format");
    return;
  }
  
  // Check if the hostname is trusted
  if (!trustedDomains.includes(url.hostname)) {
    console.error("Untrusted script source domain");
    return;
  }
  
  // Now it's safer to load the script
  const script = document.createElement('script');
  script.src = src;
  document.head.appendChild(script);
}
GitHub
© 2025 JavaScript XSS Scanner. All rights reserved.