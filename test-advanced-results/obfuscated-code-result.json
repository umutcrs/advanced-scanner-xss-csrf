{
  "vulnerabilities": [
    {
      "id": "9ba96d29-d5be-45d2-8c77-f383e564cb4d",
      "type": "postMessageOriginVulnerability",
      "severity": "high",
      "title": "Insecure Cross-Origin Message Handling",
      "description": "This code accepts postMessage events without verifying the origin, which could allow attackers to inject data from malicious websites.",
      "code": "...function setupMsgHandler () {\n  window.addEventListener (\"message\",function (e) {\n    try{\n      ...",
      "line": 58,
      "column": 1,
      "recommendation": "Always validate the origin of incoming messages before processing them.",
      "recommendationCode": "// UNSAFE:\n// window.addEventListener('message', function(event) {\n//   const data = event.data;\n//   // Process data without origin check...\n// });\n\n// SAFE:\nwindow.addEventListener('message', function(event) {\n  // Always verify the origin of incoming messages\n  const trustedOrigins = ['https://trusted-site.com', 'https://api.your-app.com'];\n  \n  if (!trustedOrigins.includes(event.origin)) {\n    console.error('Message received from untrusted origin:', event.origin);\n    return;\n  }\n  \n  // It's safe to process the message now\n  try {\n    const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\n    \n    // Process data...\n    \n  } catch (error) {\n    console.error('Error processing message:', error);\n  }\n});\n\n// When sending messages, always specify target origin:\ntargetWindow.postMessage(data, 'https://specific-target.com');  // Never use '*'"
    },
    {
      "id": "dee9b0e5-64fd-4f3c-8c5c-b14cf7b0f473",
      "type": "dangerousInnerHTMLWithVariable",
      "severity": "high",
      "title": "Potentially Dangerous innerHTML Assignment",
      "description": "Setting innerHTML/outerHTML with variables or concatenated strings can lead to XSS vulnerabilities if the input isn't properly sanitized. See OWASP guidelines for handling HTML content safely.",
      "code": ".../ g;\nreturn e = e.replace (r,(t,e)=> n[e]||\"\"),document.querySelector (\".user - profile\").innerHTML = e}\n// 11. Minified Function constructor with variable name obfuscation\n...",
      "line": 110,
      "column": 85,
      "recommendation": "Use textContent for text or sanitize HTML content before setting innerHTML. Consider using DOM methods like createElement for more complex structures.",
      "recommendationCode": "// UNSAFE patterns:\n// element.innerHTML = userProvidedData;\n// element.innerHTML = \"<div>\" + message + \"</div>\";\n\n// SAFER approaches:\n// Option 1: For text content\nelement.textContent = userProvidedData;\n\n// Option 2: For simple HTML structures, use DOM methods\nfunction safelyCreateElement(message) {\n  const div = document.createElement('div');\n  div.className = 'message';\n  \n  const strong = document.createElement('strong');\n  strong.textContent = 'Message: ';\n  \n  const span = document.createElement('span');\n  span.textContent = message; // Safely set as text\n  \n  div.appendChild(strong);\n  div.appendChild(span);\n  \n  return div;\n}\n\n// Usage:\nconst messageElement = safelyCreateElement(userMessage);\ncontainer.appendChild(messageElement);\n\n// Option 3: When you need to insert HTML, use sanitization\nimport DOMPurify from 'dompurify';\n\nfunction setHTML(element, htmlContent) {\n  // Configure DOMPurify\n  const sanitizedHTML = DOMPurify.sanitize(htmlContent, {\n    ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'span', 'p', 'a', 'ul', 'ol', 'li'],\n    ALLOWED_ATTR: ['href', 'class', 'id', 'target']\n  });\n  \n  // Now safe to use innerHTML\n  element.innerHTML = sanitizedHTML;\n}"
    },
    {
      "id": "e045cb33-db39-4a57-821f-3c93d90a9027",
      "type": "scriptCreation",
      "severity": "high",
      "title": "Dynamic Script Creation",
      "description": "Creating script elements dynamically can lead to code injection vulnerabilities, especially when the source or content is influenced by user input.",
      "code": "...if (\"string\"!= typeof t)return ! 1;\nconst e = document.createElement (\"script\");\ne.src =\"\"+ t,e.onload = r || null,document.body.appendChild (e)}\n...",
      "line": 131,
      "column": 20,
      "recommendation": "Avoid dynamically creating script elements. If necessary, ensure strict validation of sources and use CSP (Content Security Policy).",
      "recommendationCode": "// UNSAFE:\n// const script = document.createElement('script');\n// script.src = userControlledUrl; // Danger: remote code execution\n// document.head.appendChild(script);\n\n// SAFER approaches:\n// 1. Avoid dynamic script creation entirely, use alternative techniques\n//    like fetch() to retrieve data instead\n\n// 2. If you must create scripts dynamically, implement strict validation\nfunction loadScript(url) {\n  // Validate allowed domains\n  const trustedDomains = ['trusted-cdn.com', 'your-domain.com'];\n  const urlObj = new URL(url);\n  \n  if (!trustedDomains.includes(urlObj.hostname)) {\n    console.error('Script domain not allowed:', urlObj.hostname);\n    return Promise.reject(new Error('Untrusted script domain'));\n  }\n  \n  // Use fetch instead of script injection when possible\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.text();\n    })\n    .then(code => {\n      // Validate the code before executing it\n      // This is difficult to do safely - consider alternatives\n      \n      // Execute in a controlled manner\n      const functionFromCode = new Function(code);\n      return functionFromCode();\n    });\n}"
    },
    {
      "id": "a7ebf93c-d13d-49e0-9e63-885dee728cc3",
      "type": "eventHandlerInjection",
      "severity": "high",
      "title": "Event Handler Injection Vector",
      "description": "Assigning event handlers directly using user input is a common XSS vector that can execute arbitrary code.",
      "code": "...const e = document.createElement (\"script\");\ne.src =\"\"+ t,e.onload = r || null,document.body.appendChild (e)}\n// 15. Obfuscated CSP bypass with iframe srcdoc\n...",
      "line": 132,
      "column": 15,
      "recommendation": "Use addEventListener and pass functions instead of strings. Never assign event handlers using user-controlled data.",
      "recommendationCode": "// AVOID these patterns:\n// element.onclick = userProvidedCode;                // UNSAFE\n// element['onclick'] = userProvidedCode;             // UNSAFE\n// element.setAttribute('onclick', userProvidedCode); // UNSAFE\n\n// INSTEAD, use proper event listeners:\nelement.addEventListener('click', function(event) {\n  // Access user data here as a parameter\n  handleClick(userProvidedData);\n});\n\n// If you need dynamic handlers:\nconst handlers = {\n  'edit': function() { /* edit functionality */ },\n  'delete': function() { /* delete functionality */ },\n  'view': function() { /* view functionality */ }\n};\n\n// Then safely use the predefined handler:\nconst action = validateAction(userProvidedAction); // Validate to allowed values\nif (handlers.hasOwnProperty(action)) {\n  element.addEventListener('click', handlers[action]);\n}"
    },
    {
      "id": "140248b0-771f-4ad6-810c-6106f6eef846",
      "type": "eventHandlerProperty",
      "severity": "high",
      "title": "Event Handler Property Assignment",
      "description": "Setting event handler properties (onclick, onload, etc.) with user input allows direct code execution.",
      "code": "...const e = document.createElement (\"script\");\ne.src =\"\"+ t,e.onload = r || null,document.body.appendChild (e)}\n// 15. Obfuscated CSP bypass with iframe srcdoc\nfunction createUserFrame (t) {\n  const r = document.createElement (\"iframe\");\n  r[\"sr\"+\"cd\"+\"oc\"]= t;\n  ...",
      "line": 132,
      "column": 15,
      "recommendation": "Never set event handler properties using user input. Use addEventListener with function references.",
      "recommendationCode": "// Instead of:\nelement.onclick = 'alert(\"' + userInput + '\")';\n// or\nelement.onclick = function() { processUserInput(userInput); };\n\n// Use addEventListener with a function:\nelement.addEventListener('click', function(event) {\n  // Safely handle the input\n  displayMessage(sanitizeInput(userInput));\n});"
    },
    {
      "id": "b8a75b5f-2be6-45a6-b287-fe0b11d98926",
      "type": "domClobberingViaID",
      "severity": "medium",
      "title": "Potential DOM Clobbering Vulnerability",
      "description": "Using getElementById with variable inputs can be exploited via DOM clobbering attacks, where attackers inject elements with controlled IDs.",
      "code": "...try{\n  const c = document.getElementById (a);\n  if (! c)return ! 1;\n  ...",
      "line": 39,
      "column": 19,
      "recommendation": "Use constant, hardcoded IDs with getElementById or validate ID inputs against a strict allowlist.",
      "recommendationCode": "// UNSAFE patterns:\n// const element = document.getElementById(userProvidedId);\n// document.getElementById(params.get('section')).innerHTML = content;\n\n// SAFER approaches:\n// Option 1: Use hardcoded IDs (preferred)\nconst element = document.getElementById('user-profile');\n\n// Option 2: If dynamic IDs are needed, validate against an allowlist\nfunction getElementByValidatedId(id) {\n  // Define allowed IDs\n  const allowedIds = ['profile', 'settings', 'dashboard', 'messages'];\n  \n  // Validate the ID\n  if (typeof id !== 'string' || !allowedIds.includes(id)) {\n    console.error('Invalid or disallowed element ID:', id);\n    return null;\n  }\n  \n  return document.getElementById(id);\n}\n\n// Usage:\nconst section = getElementByValidatedId(sectionId);\nif (section) {\n  section.textContent = data;\n}"
    },
    {
      "id": "b4c58be1-6e95-4ed8-994c-19c36394d587",
      "type": "postMessageNoOriginCheck",
      "severity": "medium",
      "title": "Missing Origin Check in postMessage Handler",
      "description": "Processing message events without checking the origin can lead to cross-origin attacks.",
      "code": "...function setupMsgHandler () {\n  window.addEventListener (\"message\",function (e) {\n    try{\n      var t = JSON.parse (e.data);\n    t && t.d && new Function (atob (t.d))()}\n    catch (r) {\n  console.log (\"Invalid message\")}}\n)}\n...",
      "line": 58,
      "column": 1,
      "recommendation": "Always verify the origin of messages before processing them to ensure they come from trusted sources.",
      "recommendationCode": "// UNSAFE: No origin check\n// window.addEventListener('message', (event) => {\n//   const data = event.data;\n//   document.getElementById('output').innerHTML = data.message;\n// });\n\n// SECURE: With proper origin validation\nwindow.addEventListener('message', (event) => {\n  // ALWAYS check origin before processing messages\n  const trustedOrigins = ['https://trusted-site.com', 'https://partner-site.org'];\n  \n  if (!trustedOrigins.includes(event.origin)) {\n    console.error('Received message from untrusted origin:', event.origin);\n    return; // Ignore messages from untrusted origins\n  }\n  \n  // Now safe to process the message\n  try {\n    const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\n    // Use safe DOM manipulation\n    document.getElementById('output').textContent = data.message;\n  } catch (e) {\n    console.error('Error processing message:', e);\n  }\n});"
    },
    {
      "id": "2a52abb9-66b2-40e5-aab0-fd2e0bf919d8",
      "type": "postMessageOrigin",
      "severity": "medium",
      "title": "postMessage Without Origin Check",
      "description": "Handling postMessage events without verifying the origin can lead to XSS attacks from malicious websites.",
      "code": "...function setupMsgHandler () {\n  window.addEventListener (\"message\",function (e) {\n    try{\n      var t = JSON.parse (e.data);\n    t && t.d && new Function (atob (t.d))()}\n    catch (r) {\n  console.log (\"Invalid message\")}}\n)}\n...",
      "line": 58,
      "column": 8,
      "recommendation": "Always validate the origin of received messages.",
      "recommendationCode": "// Instead of:\nwindow.addEventListener('message', function(event) {\n  // Process event.data without checking origin\n  processMessage(event.data);\n});\n\n// Add origin validation:\nwindow.addEventListener('message', function(event) {\n  // Check that the origin is from a trusted domain\n  const trustedOrigins = ['https://trusted-site.com', 'https://partner-site.org'];\n  \n  if (trustedOrigins.includes(event.origin)) {\n    // Safe to process the message\n    processMessage(event.data);\n  } else {\n    console.warn('Received message from untrusted origin:', event.origin);\n  }\n});"
    },
    {
      "id": "3114d9d1-6a45-4361-8f01-2450a366471c",
      "type": "scriptElement",
      "severity": "medium",
      "title": "Dynamic Script Creation",
      "description": "Dynamically creating script elements and setting their content or src attribute can execute malicious code.",
      "code": "...if (\"string\"!= typeof t)return ! 1;\nconst e = document.createElement (\"script\");\ne.src =\"\"+ t,e.onload = r || null,document.body.appendChild (e)}\n...",
      "line": 131,
      "column": 11,
      "recommendation": "Never load scripts from untrusted sources. Use a whitelist approach to validate script URLs before loading.",
      "recommendationCode": "function loadScript(src) {\n  // Whitelist of allowed script sources\n  const allowedSources = [\n    'https://trusted-cdn.com/',\n    'https://your-own-domain.com/scripts/'\n  ];\n  \n  // Check if URL is from allowed source\n  const isAllowed = allowedSources.some(source => \n    src.startsWith(source));\n    \n  if (!isAllowed) {\n    console.error(\"Blocked loading script from untrusted source\");\n    return;\n  }\n  \n  const script = document.createElement('script');\n  script.src = src;\n  document.head.appendChild(script);\n}"
    },
    {
      "id": "222abd97-8092-437c-99c2-cc5cadf59a65",
      "type": "domClobberingViaID",
      "severity": "medium",
      "title": "Potential DOM Clobbering Vulnerability",
      "description": "Using getElementById with variable inputs can be exploited via DOM clobbering attacks, where attackers inject elements with controlled IDs.",
      "code": "...r[\"sr\"+\"cd\"+\"oc\"]= t;\ndocument.getElementById (\"user - content\").appendChild (r)}",
      "line": 137,
      "column": 9,
      "recommendation": "Use constant, hardcoded IDs with getElementById or validate ID inputs against a strict allowlist.",
      "recommendationCode": "// UNSAFE patterns:\n// const element = document.getElementById(userProvidedId);\n// document.getElementById(params.get('section')).innerHTML = content;\n\n// SAFER approaches:\n// Option 1: Use hardcoded IDs (preferred)\nconst element = document.getElementById('user-profile');\n\n// Option 2: If dynamic IDs are needed, validate against an allowlist\nfunction getElementByValidatedId(id) {\n  // Define allowed IDs\n  const allowedIds = ['profile', 'settings', 'dashboard', 'messages'];\n  \n  // Validate the ID\n  if (typeof id !== 'string' || !allowedIds.includes(id)) {\n    console.error('Invalid or disallowed element ID:', id);\n    return null;\n  }\n  \n  return document.getElementById(id);\n}\n\n// Usage:\nconst section = getElementByValidatedId(sectionId);\nif (section) {\n  section.textContent = data;\n}"
    },
    {
      "id": "529dc1cd-b784-4779-b8f4-275de2fe320f",
      "type": "documentGetElementById",
      "severity": "low",
      "title": "Potential DOM Clobbering Vulnerability",
      "description": "Using getElementById with a fixed string can be exploited through DOM clobbering if the ID is also used as an object property.",
      "code": "...r[\"sr\"+\"cd\"+\"oc\"]= t;\ndocument.getElementById (\"user - content\").appendChild (r)}",
      "line": 137,
      "column": 1,
      "recommendation": "Ensure IDs used with getElementById are not also used as object property names in your code.",
      "recommendationCode": "// Vulnerable pattern:\n// const config = {};\n// config.endpoint = document.getElementById('endpoint').value;\n// fetch(config.endpoint + '/data');\n\n// Safer approach:\nfunction getElementValueById(id) {\n  const element = document.getElementById(id);\n  // Validate element is of expected type\n  if (element && element instanceof HTMLInputElement) {\n    return element.value;\n  }\n  return null;\n}\n\n// Then use with validation:\nconst endpoint = getElementValueById('endpoint');\nif (endpoint && isValidUrl(endpoint)) {\n  fetch(endpoint + '/data');\n}"
    },
    {
      "id": "47229027-95ba-4053-a707-e465ea01bc9f",
      "type": "base64Execution",
      "severity": "critical",
      "title": "Base64 Code Execution",
      "description": "Using atob() to decode and execute Base64-encoded strings is a common technique to hide malicious code from security scanners.",
      "code": "...var t = JSON.parse (e.data);\nt && t.d && new Function (atob (t.d))()}\ncatch (r) {\n  ...",
      "line": 61,
      "column": 17,
      "recommendation": "Never execute code that comes from Base64-decoded strings, even if it seems harmless.",
      "recommendationCode": "// NEVER do these:\n// eval(atob(encodedScript));\n// setTimeout(atob(encodedCommand), 100);\n// new Function(atob(encodedCode))();\n\n// For legitimate Base64 data:\nfunction safelyDecodeBase64(encodedData) {\n  try {\n    // Decode but don't execute\n    const decoded = atob(encodedData);\n    \n    // Log for debugging/transparency\n    console.log('Decoded data:', decoded);\n    \n    // Process as data, not code\n    return decoded;\n  } catch (e) {\n    console.error('Invalid Base64 data:', e);\n    return null;\n  }\n}\n\n// Then use the decoded data for non-executable purposes\nconst userData = safelyDecodeBase64(encodedUserData);\ndocument.getElementById('profile').textContent = userData;"
    },
    {
      "id": "08e29794-a897-4587-b99b-c2f8e1ebee38",
      "type": "functionConstructor",
      "severity": "critical",
      "title": "Function Constructor Misuse",
      "description": "The Function constructor is similar to eval() and can execute arbitrary code if given user input.",
      "code": "...var t = JSON.parse (e.data);\nt && t.d && new Function (atob (t.d))()}\ncatch (r) {\n  ...",
      "line": 61,
      "column": 13,
      "recommendation": "Avoid using the Function constructor with user input. Use safer alternatives for dynamic code execution.",
      "recommendationCode": "// Instead of:\nconst fn = new Function('param', userCode);\n\n// Consider a more restrictive approach:\n// 1. Use a template literals with fixed code\nconst fn = (param) => {\n  // Fixed operations here\n  return param * 2;\n};\n\n// 2. Or if you need configurability, use a whitelist approach\nconst allowedOperations = {\n  'double': (x) => x * 2,\n  'square': (x) => x * x,\n  'increment': (x) => x + 1\n};\n\n// Then use the selected operation safely\nconst operation = allowedOperations[userSelection] || ((x) => x);\nconst result = operation(value);"
    },
    {
      "id": "40accff8-59c3-4212-a3de-31d61fcae3fd",
      "type": "innerHTML",
      "severity": "critical",
      "title": "innerHTML Injection",
      "description": "Unfiltered user input is directly used with innerHTML, allowing attackers to inject and execute malicious scripts. See OWASP guidelines for handling HTML content safely.",
      "code": ".../ g;\nreturn e = e.replace (r,(t,e)=> n[e]||\"\"),document.querySelector (\".user - profile\").innerHTML = e}\n// 11. Minified Function constructor with variable name obfuscation\nfunction o (n,t,c) {\n  var a =\"\",i =\"\",u =\"\";\nreturn a = n ||\"\",i = t ||\"\",u = c ||\"\",Function (a,i,u)}\n...",
      "line": 110,
      "column": 85,
      "recommendation": "Always sanitize user input before inserting it into the DOM. Use textContent instead of innerHTML or implement a library like DOMPurify.",
      "recommendationCode": "// Option 1: Use textContent (safest)\ndocument.getElementById('output').textContent = userInput;\n\n// Option 2: Use DOMPurify library\ndocument.getElementById('output').innerHTML = DOMPurify.sanitize(userInput);"
    },
    {
      "id": "fa3e3d15-e44a-4fa1-a8ba-5232957e7bbd",
      "type": "eval",
      "severity": "critical",
      "title": "Unsafe eval() Usage",
      "description": "The use of eval() with user input creates a severe XSS vulnerability that allows arbitrary code execution. This is one of the most serious XSS vulnerabilities as it allows direct code execution.",
      "code": "...function p (n) {\n  const t = o (\"a\",\"b\",\"return eval (a + b)\");\nreturn t (n,\"()\")}\n...",
      "line": 116,
      "column": 30,
      "recommendation": "Avoid using eval() with user input. For mathematical expressions, use safer alternatives like math.js library or Function constructor with proper input validation.",
      "recommendationCode": "// Option 1: Use a math library\nfunction calculateExpression() {\n  const expr = document.getElementById('expression').value;\n  try {\n    // Validate that the input contains only mathematical expressions\n    if (!/^[0-9\\+\\-\\*\\/\\(\\)\\.\\s]*$/.test(expr)) {\n      throw new Error(\"Invalid expression\");\n    }\n    const result = math.evaluate(expr); // Using math.js\n    return result;\n  } catch(e) {\n    return \"Error: Invalid expression\";\n  }\n}"
    }
  ],
  "summary": {
    "critical": 4,
    "high": 5,
    "medium": 5,
    "low": 1,
    "info": 0,
    "total": 15,
    "uniqueTypes": 14,
    "passedChecks": 143
  },
  "scannedAt": "2025-03-27T11:36:25.477Z"
}