import React, { useState, useEffect, useRef } from "react";
import { Vulnerability } from "@shared/schema";
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { AlertCircle, AlertTriangle, Info, Shield, Copy, Check, ChevronDown, ChevronUp, Code, FileJson } from "lucide-react";

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  originalCode: string;
  isSelected?: boolean;
}

export default function VulnerabilityCard({ vulnerability, originalCode, isSelected = false }: VulnerabilityCardProps) {
  const [isExpanded, setIsExpanded] = useState(true);
  const [copied, setCopied] = useState(false);
  const cardRef = useRef<HTMLDivElement>(null);

  // Helper function to get background color based on severity
  const getBgColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-50';
      case 'high': return 'bg-orange-50';
      case 'medium': return 'bg-yellow-50';
      case 'low': return 'bg-blue-50';
      default: return 'bg-gray-50';
    }
  };

  // Helper function to get header background color based on severity
  const getHeaderBgColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100';
      case 'high': return 'bg-orange-100';
      case 'medium': return 'bg-yellow-100';
      case 'low': return 'bg-blue-100';
      default: return 'bg-gray-100';
    }
  };

  // Helper function to get badge color based on severity
  const getBadgeColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600 text-white';
      case 'high': return 'bg-orange-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-blue-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  // Helper function to get border color based on selection state
  const getBorderColor = () => {
    if (isSelected) {
      return "border-blue-500 ring-2 ring-blue-300";
    }
    return "border-gray-200";
  };

  // Capitalize severity for display
  const displaySeverity = vulnerability.severity.charAt(0).toUpperCase() + vulnerability.severity.slice(1);

  // Get severity icon
  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <AlertCircle className="h-4 w-4" />;
      case 'high': return <AlertTriangle className="h-4 w-4" />;
      case 'medium': return <AlertTriangle className="h-4 w-4" />;
      case 'low': return <Info className="h-4 w-4" />;
      default: return <Shield className="h-4 w-4" />;
    }
  };

  // Copy code to clipboard
  const copyToClipboard = (code: string) => {
    navigator.clipboard.writeText(code);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  // Scroll into view when selected
  useEffect(() => {
    if (isSelected && cardRef.current) {
      cardRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }, [isSelected]);

  // Calculate confidence display color
  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.8) return "text-green-600 bg-green-100";
    if (confidence >= 0.5) return "text-yellow-600 bg-yellow-100";
    return "text-orange-600 bg-orange-100";
  };

  return (
    <div 
      ref={cardRef}
      className={`${getBgColor(vulnerability.severity)} rounded-lg border ${getBorderColor()} overflow-hidden mb-4 shadow-sm transition-all duration-300 ${isSelected ? 'transform scale-102 translate-y-0' : ''}`}
      style={{
        transition: "all 0.3s ease",
        transform: isSelected ? "scale(1.01)" : "scale(1)"
      }}
    >
      <div className={`px-4 py-3 ${getHeaderBgColor(vulnerability.severity)} flex justify-between items-center`}>
        <div className="flex items-center flex-wrap">
          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getBadgeColor(vulnerability.severity)} mr-2 transition-all duration-200 hover:shadow-md`}>
            {getSeverityIcon(vulnerability.severity)}
            <span className="ml-1">{displaySeverity}</span>
          </span>
          <h5 className="text-sm font-medium text-gray-900 mr-2">{vulnerability.title}</h5>
          
          {/* Display line and column if available */}
          {vulnerability.line && (
            <span className="ml-0 mt-1 md:mt-0 md:ml-2 text-xs text-gray-600 bg-gray-200 px-2 py-0.5 rounded-full flex items-center">
              <Code className="mr-1 h-3 w-3" />
              Line {vulnerability.line}{vulnerability.column ? `:${vulnerability.column}` : ''}
            </span>
          )}
          
          {/* Show pattern found if available */}
          {vulnerability.patternFound && (
            <span className="ml-0 mt-1 md:mt-0 md:ml-2 text-xs text-gray-600 bg-gray-200 px-2 py-0.5 rounded-full flex items-center">
              <FileJson className="mr-1 h-3 w-3" />
              {vulnerability.patternFound.length > 20 
                ? `${vulnerability.patternFound.substring(0, 20)}...` 
                : vulnerability.patternFound}
            </span>
          )}

          {/* Show confidence score if available */}
          {vulnerability.detectionConfidence !== undefined && (
            <span className={`ml-0 mt-1 md:mt-0 md:ml-2 text-xs px-2 py-0.5 rounded-full flex items-center ${getConfidenceColor(vulnerability.detectionConfidence)}`}>
              <span className="font-medium">
                {Math.round(vulnerability.detectionConfidence * 100)}% Confidence
              </span>
            </span>
          )}
        </div>
        <button 
          className="text-gray-500 hover:text-gray-700 transition-colors duration-200 p-1 rounded-full hover:bg-gray-200"
          onClick={() => setIsExpanded(!isExpanded)}
          aria-label={isExpanded ? "Collapse details" : "Expand details"}
        >
          {isExpanded ? <ChevronUp className="h-5 w-5" /> : <ChevronDown className="h-5 w-5" />}
        </button>
      </div>
      
      {isExpanded && (
        <div className="p-4 animate-fadeIn">
          <div className="mb-3">
            <p className="text-sm text-gray-700">{vulnerability.description}</p>
          </div>
          
          {/* Vulnerable code section */}
          <div className="mb-3">
            <div className="flex justify-between items-center mb-1">
              <h6 className="text-xs font-semibold text-gray-700 flex items-center">
                <AlertCircle className="h-3 w-3 mr-1 text-red-500" />
                <span>Vulnerable Code</span>
              </h6>
              
              <button 
                onClick={() => copyToClipboard(vulnerability.code)}
                className="text-xs text-gray-500 hover:text-gray-700 flex items-center transition-colors duration-200 px-2 py-1 rounded hover:bg-gray-100"
                aria-label="Copy code"
              >
                {copied ? <Check className="h-3 w-3 mr-1 text-green-500" /> : <Copy className="h-3 w-3 mr-1" />}
                <span>{copied ? "Copied!" : "Copy"}</span>
              </button>
            </div>
            
            <div className="rounded overflow-hidden border border-red-200 shadow-sm hover:shadow-md transition-shadow duration-300">
              <SyntaxHighlighter 
                language="javascript" 
                style={atomDark}
                customStyle={{ 
                  fontSize: '0.75rem', 
                  padding: '0.5rem', 
                  margin: 0,
                  borderRadius: '0.25rem' 
                }}
                showLineNumbers={true}
                startingLineNumber={Math.max(1, (vulnerability.line || 1) - 2)}
                lineProps={(lineNumber: number) => {
                  const isVulnerableLine = lineNumber === vulnerability.line;
                  return {
                    style: {
                      display: 'block',
                      backgroundColor: isVulnerableLine ? 'rgba(239, 68, 68, 0.2)' : undefined,
                      borderLeft: isVulnerableLine ? '4px solid rgb(239, 68, 68)' : undefined,
                      paddingLeft: isVulnerableLine ? '16px' : undefined,
                      animation: isVulnerableLine ? 'pulseHighlight 2s infinite' : undefined,
                    }
                  };
                }}
                wrapLongLines={true}
              >
                {vulnerability.code}
              </SyntaxHighlighter>
            </div>
          </div>
          
          {/* Recommendation section */}
          <div className="bg-white rounded p-3 border border-green-200 hover:shadow-md transition-shadow duration-300">
            <div className="flex justify-between items-center mb-1">
              <h6 className="text-xs font-semibold text-gray-700 flex items-center">
                <Shield className="h-3 w-3 mr-1 text-green-500" />
                <span>Security Recommendation</span>
              </h6>
              
              {vulnerability.recommendationCode && (
                <button 
                  onClick={() => copyToClipboard(vulnerability.recommendationCode || '')}
                  className="text-xs text-gray-500 hover:text-gray-700 flex items-center transition-colors duration-200 px-2 py-1 rounded hover:bg-gray-100"
                  aria-label="Copy secure code"
                >
                  {copied ? <Check className="h-3 w-3 mr-1 text-green-500" /> : <Copy className="h-3 w-3 mr-1" />}
                  <span>{copied ? "Copied!" : "Copy Secure Code"}</span>
                </button>
              )}
            </div>
            
            <p className="text-xs text-gray-600">{vulnerability.recommendation}</p>
            
            {vulnerability.recommendationCode && (
              <div className="mt-2 rounded bg-gray-100 overflow-hidden border border-gray-200 shadow-sm">
                <SyntaxHighlighter 
                  language="javascript" 
                  style={atomDark}
                  customStyle={{ 
                    fontSize: '0.75rem', 
                    padding: '0.5rem', 
                    margin: 0,
                    borderRadius: '0.25rem' 
                  }}
                  wrapLongLines={true}
                >
                  {vulnerability.recommendationCode}
                </SyntaxHighlighter>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
