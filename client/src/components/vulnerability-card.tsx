import React, { useState } from "react";
import { Vulnerability } from "@shared/schema";
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  originalCode: string;
}

export default function VulnerabilityCard({ vulnerability, originalCode }: VulnerabilityCardProps) {
  const [isExpanded, setIsExpanded] = useState(true);

  // Helper function to get background color based on severity
  const getBgColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-50';
      case 'high': return 'bg-orange-50';
      case 'medium': return 'bg-yellow-50';
      case 'low': return 'bg-blue-50';
      default: return 'bg-gray-50';
    }
  };

  // Helper function to get header background color based on severity
  const getHeaderBgColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100';
      case 'high': return 'bg-orange-100';
      case 'medium': return 'bg-yellow-100';
      case 'low': return 'bg-blue-100';
      default: return 'bg-gray-100';
    }
  };

  // Helper function to get badge color based on severity
  const getBadgeColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600 text-white';
      case 'high': return 'bg-orange-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-blue-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  // Capitalize severity for display
  const displaySeverity = vulnerability.severity.charAt(0).toUpperCase() + vulnerability.severity.slice(1);

  return (
    <div className={`${getBgColor(vulnerability.severity)} rounded-lg border overflow-hidden mb-4`}>
      <div className={`px-4 py-3 ${getHeaderBgColor(vulnerability.severity)} flex justify-between items-center`}>
        <div className="flex items-center">
          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getBadgeColor(vulnerability.severity)} mr-2`}>
            {displaySeverity}
          </span>
          <h5 className="text-sm font-medium text-gray-900">{vulnerability.title}</h5>
          
          {/* Display line and column if available */}
          {vulnerability.line && (
            <span className="ml-2 text-xs text-gray-500 bg-gray-200 px-2 py-0.5 rounded-full">
              Line {vulnerability.line}{vulnerability.column ? `:${vulnerability.column}` : ''}
            </span>
          )}
        </div>
        <button 
          className="text-gray-500 hover:text-gray-700"
          onClick={() => setIsExpanded(!isExpanded)}
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-5 w-5" 
            viewBox="0 0 20 20" 
            fill="currentColor"
          >
            <path 
              fillRule="evenodd" 
              d={isExpanded 
                ? "M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" 
                : "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
              } 
              clipRule="evenodd" 
            />
          </svg>
        </button>
      </div>
      
      {isExpanded && (
        <div className="p-4">
          <div className="mb-3">
            <p className="text-sm text-gray-700">{vulnerability.description}</p>
          </div>
          
          {/* Vulnerable code section */}
          <div className="mb-3">
            <h6 className="text-xs font-semibold text-gray-700 mb-1">Vulnerable Code</h6>
            <div className="rounded overflow-hidden">
              <SyntaxHighlighter 
                language="javascript" 
                style={atomDark}
                customStyle={{ fontSize: '0.75rem', padding: '0.5rem', margin: 0 }}
                showLineNumbers={true}
                startingLineNumber={Math.max(1, (vulnerability.line || 1) - 2)}
              >
                {vulnerability.code}
              </SyntaxHighlighter>
            </div>
          </div>
          
          {/* Recommendation section */}
          <div className="bg-white rounded p-3 border border-gray-200">
            <div className="flex justify-between items-start">
              <h6 className="text-xs font-semibold text-gray-700 mb-1">Recommendation</h6>
            </div>
            
            <p className="text-xs text-gray-600">{vulnerability.recommendation}</p>
            
            {vulnerability.recommendationCode && (
              <div className="mt-2 rounded bg-gray-100 overflow-hidden">
                <SyntaxHighlighter 
                  language="javascript" 
                  style={atomDark}
                  customStyle={{ fontSize: '0.75rem', padding: '0.5rem', margin: 0 }}
                >
                  {vulnerability.recommendationCode}
                </SyntaxHighlighter>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
