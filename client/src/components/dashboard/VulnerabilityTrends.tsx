import React, { useState, useEffect } from 'react';
import { ScanResult } from '@shared/schema';
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  BarChart,
  Bar,
  Cell
} from 'recharts';
import { motion } from 'framer-motion';

interface VulnerabilityTrendsProps {
  scanResult: ScanResult | null;
  previousScans?: ScanResult[];
}

// Helper function to generate mock historical data based on current scan
// In a real app, this would come from actual historical data
const generateHistoricalData = (current: ScanResult) => {
  // Create fictional scan dates in the past
  const dates = [];
  const today = new Date();
  
  for (let i = 6; i >= 0; i--) {
    const date = new Date(today);
    date.setDate(date.getDate() - i);
    dates.push(date.toISOString());
  }
  
  // For demo purposes: Show a trend where vulnerabilities were gradually found and fixed
  const criticalTrend = [3, 5, 4, 2, 3, 2, current.summary.critical];
  const highTrend = [8, 6, 5, 7, 4, 3, current.summary.high];
  const mediumTrend = [6, 8, 10, 7, 5, 4, current.summary.medium];
  const lowTrend = [12, 10, 8, 5, 3, 2, current.summary.low];

  return dates.map((date, index) => ({
    date: date,
    displayDate: new Date(date).toLocaleDateString(undefined, { month: 'short', day: 'numeric' }),
    critical: criticalTrend[index],
    high: highTrend[index],
    medium: mediumTrend[index],
    low: lowTrend[index],
    total: criticalTrend[index] + highTrend[index] + mediumTrend[index] + lowTrend[index]
  }));
};

const VulnerabilityTrends: React.FC<VulnerabilityTrendsProps> = ({ 
  scanResult, 
  previousScans = [] 
}) => {
  const [trendData, setTrendData] = useState<any[]>([]);
  const [activeTab, setActiveTab] = useState<'timeline' | 'types'>('timeline');
  
  useEffect(() => {
    if (scanResult) {
      // In a real application, we would use actual historical data from previousScans
      // For demo purposes, we'll generate fictional historical data
      const historicalData = generateHistoricalData(scanResult);
      setTrendData(historicalData);
    }
  }, [scanResult, previousScans]);
  
  // Prepare data for vulnerability types chart
  const getVulnerabilityTypeData = () => {
    if (!scanResult) return [];
    
    // Group vulnerabilities by type
    const typeCount: Record<string, number> = {};
    scanResult.vulnerabilities.forEach(vuln => {
      typeCount[vuln.type] = (typeCount[vuln.type] || 0) + 1;
    });
    
    // Convert to array format for chart
    return Object.entries(typeCount)
      .map(([type, count]) => ({
        name: formatTypeName(type),
        value: count,
        fullType: type
      }))
      .sort((a, b) => b.value - a.value)
      .slice(0, 10); // Show top 10 types
  };
  
  // Helper to format type names for display
  const formatTypeName = (type: string) => {
    return type
      .replace(/([A-Z])/g, ' $1') // Add space before capital letters
      .replace(/^./, (str) => str.toUpperCase()) // Capitalize first letter
      .trim()
      .slice(0, 15) + (type.length > 15 ? '...' : ''); // Truncate if too long
  };
  
  // Define colors for severity levels
  const COLORS = {
    critical: '#ef4444',
    high: '#f97316',
    medium: '#eab308',
    low: '#3b82f6'
  };
  
  // Get color for vulnerability type based on severity from first occurrence
  const getTypeColor = (type: string) => {
    if (!scanResult) return COLORS.low;
    
    const vuln = scanResult.vulnerabilities.find(v => v.type === type);
    if (!vuln) return COLORS.low;
    
    return COLORS[vuln.severity as keyof typeof COLORS] || COLORS.low;
  };

  if (!scanResult) {
    return (
      <div className="bg-gray-50 rounded-lg p-6 shadow-sm border flex justify-center items-center h-64">
        <p className="text-gray-500">No scan results available</p>
      </div>
    );
  }

  const typeData = getVulnerabilityTypeData();

  return (
    <div className="bg-white rounded-lg shadow-sm border overflow-hidden">
      <div className="p-4 border-b">
        <h3 className="text-lg font-semibold">Vulnerability Trends & Analytics</h3>
      </div>
      
      <div className="border-b">
        <div className="flex">
          <button
            className={`px-4 py-2 text-sm font-medium border-b-2 ${
              activeTab === 'timeline'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
            onClick={() => setActiveTab('timeline')}
          >
            Timeline View
          </button>
          <button
            className={`px-4 py-2 text-sm font-medium border-b-2 ${
              activeTab === 'types'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
            onClick={() => setActiveTab('types')}
          >
            Vulnerability Types
          </button>
        </div>
      </div>
      
      <div className="p-6">
        {activeTab === 'timeline' ? (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="h-80"
          >
            <ResponsiveContainer width="100%" height="100%">
              <LineChart
                data={trendData}
                margin={{
                  top: 5,
                  right: 30,
                  left: 20,
                  bottom: 5,
                }}
              >
                <CartesianGrid strokeDasharray="3 3" stroke="#f3f4f6" />
                <XAxis 
                  dataKey="displayDate" 
                  tick={{ fontSize: 12 }}
                />
                <YAxis tick={{ fontSize: 12 }} />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: 'white', 
                    borderRadius: '6px',
                    border: '1px solid #e5e7eb',
                    boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)'
                  }}
                  formatter={(value: number, name: string) => {
                    return [value, name.charAt(0).toUpperCase() + name.slice(1)];
                  }}
                  labelFormatter={(label) => `Date: ${label}`}
                />
                <Legend />
                <Line
                  type="monotone"
                  dataKey="critical"
                  stroke={COLORS.critical}
                  strokeWidth={2}
                  dot={{ r: 4 }}
                  activeDot={{ r: 6 }}
                  animationDuration={1500}
                />
                <Line
                  type="monotone"
                  dataKey="high"
                  stroke={COLORS.high}
                  strokeWidth={2}
                  dot={{ r: 4 }}
                  activeDot={{ r: 6 }}
                  animationDuration={1500}
                />
                <Line
                  type="monotone"
                  dataKey="medium"
                  stroke={COLORS.medium}
                  strokeWidth={2}
                  dot={{ r: 4 }}
                  activeDot={{ r: 6 }}
                  animationDuration={1500}
                />
                <Line
                  type="monotone"
                  dataKey="low"
                  stroke={COLORS.low}
                  strokeWidth={2}
                  dot={{ r: 4 }}
                  activeDot={{ r: 6 }}
                  animationDuration={1500}
                />
              </LineChart>
            </ResponsiveContainer>
            <div className="text-center text-xs text-gray-500 mt-2">
              Vulnerability trends over time
            </div>
          </motion.div>
        ) : (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="h-80"
          >
            {typeData.length > 0 ? (
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={typeData}
                  layout="vertical"
                  margin={{
                    top: 5,
                    right: 30,
                    left: 100,
                    bottom: 5,
                  }}
                >
                  <CartesianGrid strokeDasharray="3 3" stroke="#f3f4f6" horizontal={true} vertical={false} />
                  <XAxis type="number" tick={{ fontSize: 12 }} />
                  <YAxis 
                    dataKey="name" 
                    type="category" 
                    tick={{ fontSize: 12 }} 
                    width={100} 
                  />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: 'white', 
                      borderRadius: '6px',
                      border: '1px solid #e5e7eb',
                      boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)'
                    }}
                    formatter={(value: number, name: string, props: any) => {
                      return [value, 'Occurrences'];
                    }}
                    labelFormatter={(label) => `Type: ${label}`}
                  />
                  <Bar 
                    dataKey="value" 
                    animationDuration={1500}
                    animationBegin={300}
                  >
                    {typeData.map((entry, index) => (
                      <Cell 
                        key={`cell-${index}`} 
                        fill={getTypeColor(entry.fullType)} 
                      />
                    ))}
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            ) : (
              <div className="flex justify-center items-center h-full">
                <p className="text-gray-500">No vulnerability data available</p>
              </div>
            )}
            <div className="text-center text-xs text-gray-500 mt-2">
              Distribution of vulnerability types
            </div>
          </motion.div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityTrends;